{"version":3,"file":"gatsby-plugin-image-a70f2e6065dfec6e02cd.js","mappings":"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","sources":["webpack://kalmars-website/./node_modules/camelcase/index.js","webpack://kalmars-website/../src/image-utils.ts","webpack://kalmars-website/../src/components/hooks.ts","webpack://kalmars-website/../src/components/picture.tsx","webpack://kalmars-website/../src/components/layout-wrapper.tsx","webpack://kalmars-website/../src/components/placeholder.tsx","webpack://kalmars-website/../src/components/main-image.tsx","webpack://kalmars-website/../src/components/gatsby-image.browser.tsx","webpack://kalmars-website/../src/components/gatsby-image.server.tsx","webpack://kalmars-website/../src/components/static-image.server.tsx","webpack://kalmars-website/../src/components/static-image.tsx"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","p","f","message","console","warn","a","b","images","image","src","width","filename","lastIndexOf","dot","ext","args","layout","height","sourceMetadata","breakpoints","aspectRatio","formats","format","Math","round","setDefaultDimensions","generateImageSource","fit","_generateImageSource","pluginName","reporter","backgroundColor","placeholderURL","Error","formatFromFilename","Set","size","has","delete","add","imgDimensions","DEFAULT_BREAKPOINTS","entries","erroneousUserDimensions","dim","outputPixelDensities","DEFAULT_PIXEL_DENSITIES","dedupeAndSortDensities","getDimensionsAndAspectRatio","calculated","fixedDimension","sizes","densities","density","presentationWidth","originalWidth","presentationHeight","unscaledWidth","calculateImageSizes","sources","imageSizes","forEach","imageSrc","Boolean","find","img","unscaled","result","fallback","srcSet","getSrcSet","push","type","imageProps","placeholder","values","from","sort","sortNumeric","l","min","includes","dimensions","Number","MAX_SAFE_INTEGER","widthOption","heightOption","imageAspectRatio","n","max","prototype","node","_node$images","_node$images$fallback","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","getImage","_getImage","_getImage$images","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","_breakpoints","EVERY_BREAKPOINT","isLoading","isLoaded","loading","style","shouldLoad","opacity","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","defaultImage","artDirected","media","output","source","fallbackImage","paddingTop","maxWidth","display","React","alt","role","children","Fragment","Sizer","q","P","H","decoding","undefined","t","Image","key","propTypes","PropTypes","Picture","displayName","isRequired","e","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","altValidator","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","getWrapperProps","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","removeEventListener","onLoadListener","imageCache","cacheKey","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","memo","GatsbyImageHydrator","GatsbyImage","se","checkDimensionProps","validLayouts","GatsbyImageBrowser","__error","imageData","__imageData","StaticImage"],"sourceRoot":""}