{"version":3,"file":"component---src-pages-index-js-9e5e3481993f588079cd.js","mappings":"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","sources":["webpack://kalmars-website/./src/components/elements/LoadingScreen.js","webpack://kalmars-website/./src/components/helpers/TextScramble.js","webpack://kalmars-website/./src/pages/index.js"],"sourcesContent":["import React from \"react\";\r\n\r\nexport default function LoadingScreen() {\r\n    return (\r\n        <>\r\n            <div className=\"container h-screen mx-auto flex justify-center items-center\">\r\n                <div className=\"loading-message pt-32 lg:pt-60\">\r\n                    <h1 t=\"LOADING...\">LOADING...</h1>\r\n                </div>\r\n\r\n                <div className=\"bars-common bar-one\"></div>\r\n                <div className=\"bars-common bar-two\"></div>\r\n                <div className=\"bars-common bar-three\"></div>\r\n\r\n                <div className=\"squares-common square-one\"></div>\r\n                <div className=\"squares-common square-two\"></div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","export default class TextScramble {\r\n\r\n    constructor(el, chars = '!<>-_\\\\/[]{}â€”=+*^?#________') {\r\n        if(!el)\r\n            return;\r\n        this.el = el\r\n        this.chars = chars\r\n        this.update = this.update.bind(this)\r\n        this.initText = el.innerText\r\n    }\r\n\r\n    setText(newText= null) {\r\n        if(!newText)\r\n            newText = this.initText\r\n        const oldText = this.el.innerText\r\n        const length = Math.max(oldText.length, newText.length)\r\n        const promise = new Promise((resolve) => this.resolve = resolve)\r\n        this.queue = []\r\n        for (let i = 0; i < length; i++) {\r\n            const from = oldText[i] || ''\r\n            const to = newText[i] || ''\r\n            const start = Math.floor(Math.random() * 40)\r\n            const end = start + Math.floor(Math.random() * 40)\r\n            this.queue.push({from, to, start, end})\r\n        }\r\n        cancelAnimationFrame(this.frameRequest)\r\n        this.frame = 0\r\n        this.update()\r\n        return promise\r\n    }\r\n\r\n    update() {\r\n        let output = ''\r\n        let complete = 0\r\n        for (let i = 0, n = this.queue.length; i < n; i++) {\r\n            let {from, to, start, end, char} = this.queue[i]\r\n            if (this.frame >= end) {\r\n                complete++\r\n                output += to\r\n            } else if (this.frame >= start) {\r\n                if (!char || Math.random() < 0.28) {\r\n                    char = this.randomChar()\r\n                    this.queue[i].char = char\r\n                }\r\n                output += `<span class=\"dud\">${char}</span>`\r\n            } else {\r\n                output += from\r\n            }\r\n        }\r\n        this.el.innerHTML = output\r\n        if (complete === this.queue.length) {\r\n            this.resolve()\r\n        } else {\r\n            this.frameRequest = requestAnimationFrame(this.update)\r\n            this.frame++\r\n        }\r\n    }\r\n\r\n    randomChar() {\r\n        return this.chars[Math.floor(Math.random() * this.chars.length)]\r\n    }\r\n}","import React, {lazy} from \"react\"\r\n\r\nimport \"../style/global.scss\";\r\nimport anime from \"animejs\";\r\nimport TextScramble from \"../components/helpers/TextScramble\";\r\nimport {useLayoutEffect} from \"react\";\r\nimport LoadingScreen from \"../components/elements/LoadingScreen\";\r\nconst Navigation = lazy(() => import(\"../components/Navigation\"));\r\nconst HeroBlock = lazy(() => import(\"../layout/HeroBlock\"));\r\n\r\nconst IndexPage = () => {\r\n\r\n    function getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        console.log('test')\r\n        window.loading = true;\r\n        let timeline = anime.timeline({\r\n            easing: 'linear',\r\n            autoplay: true,\r\n        });\r\n        timeline.add({\r\n            easing: 'easeOutExpo',\r\n            autoplay: true,\r\n            targets: '.css--anim-footer',\r\n            translateX: [\"-100%\", 0],\r\n            duration: 100,\r\n            delay: 300\r\n        });\r\n        timeline.add({\r\n            targets: '.css--page-number',\r\n            easing: 'easeOutExpo',\r\n            opacity: [0, 1],\r\n            scale: [0.8, 1],\r\n            duration: 400,\r\n        });\r\n        timeline.finished.then(() => {\r\n            window.loading = false;\r\n        })\r\n\r\n        let elements = document.getElementsByClassName('text-scramble');\r\n        Array.prototype.forEach.call(elements, function (el) {\r\n            let glitch_text = new TextScramble(el)\r\n            const next_update = () => {\r\n                glitch_text.setText().then(() => {\r\n                    setTimeout(next_update, 13000 + getRandomInt(0, 5000))\r\n                })\r\n            }\r\n            next_update();\r\n        });\r\n    },);\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <main>\r\n                <React.Suspense fallback={<LoadingScreen />}>\r\n                    <div id=\"main-wrapper relative\">\r\n                        <Navigation pageNr={'01'}/>\r\n                        <section>\r\n                            <HeroBlock/>\r\n                        </section>\r\n                    </div>\r\n                </React.Suspense>\r\n            </main>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default IndexPage\r\n"],"names":["LoadingScreen","className","t","TextScramble","el","chars","this","update","bind","initText","innerText","setText","newText","oldText","length","Math","max","promise","Promise","resolve","queue","i","from","to","start","floor","random","end","push","cancelAnimationFrame","frameRequest","frame","output","complete","n","char","randomChar","innerHTML","requestAnimationFrame","Navigation","lazy","HeroBlock","useLayoutEffect","console","log","window","loading","timeline","anime","easing","autoplay","add","targets","translateX","duration","delay","opacity","scale","finished","then","elements","document","getElementsByClassName","Array","prototype","forEach","call","glitch_text","next_update","min","setTimeout","ceil","fallback","id","pageNr"],"sourceRoot":""}